#!/usr/bin/env zsh

#
# This is a sample script for use with the dynamic MOTD (Message of the Day)
# feature provided by this library.
#
# If you're not familiar with MOTD, or what 'update-motd' does on some *nix
# distributions, you should read the MOTD.md file in the root of this repository.
#
# However, if you're feeling adventerous, I'll give you the TLDR here:
#
# MOTD is a dynamically generated (usually, but can be static too) file that
# is sent to your terminal whenever you initiate an SSH or other login session.
#
# This mechanism is what provides the information that you see when you log in to a
# remote server and you are shown details about the host name, uptime, OS,
# whether updates are available to packages, etc.
#
# On macOS, there is no dynamic MOTD generation mechanism that I'm aware of. This
# implementation is simple, though: a script (motd.zsh) generates the necessary
# files and directories in preparation for its use.
#
# A cron-like task is installed which periodically enumerates the scripts in the
# MOTD update script folder, and sends their output to the MOTD file, causing it
# to be nice and fresh.
#
# This script is one that lives in that folder, and typically these scripts are given
# names like 10-header-hello. This is because when the scripts are executed, they are
# done so in a descending alphabetical order; a script that starts with '1' is going
# to run before one that starts with '2', and so on. This ensures that the MOTD file
# always has the content in the right order.
#
# All of the output generated by this script to stdout is piped into the MOTD file,
# so all you have to do is generate useful output.
#
# If you don't want to spend the time and effort setting up the MOTD update feature,
# you can just execute this script from a terminal and observe the output.
#

# try to determine a good guesstimate for terminal column count, since
# we're not running under a terminal.
_columns="$(tput -Txterm-256color cols)"
if [ "${_columns}" -lt 90 ]; then
    _columns="90"
fi

# we also don't have access to $PATH, so the following paths must be explicit.
_figlet_path="/opt/homebrew/bin/figlet"
_figlet_font_dir="/opt/homebrew/Cellar/toilet/0.3/share/figlet/"

# print the hostname in ASCII art.
echo "\n"
"${_figlet_path}" -w "${_columns}" -c -d "${_figlet_font_dir}" \
    -f "smslant" "$(hostname)"
